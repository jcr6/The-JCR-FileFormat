JCR6 file format
================


This is only a quick description of how a JCR6 file is set up.
Please note, this document was set up on February 7, 2021, and some changes may have taken place later. 
As long as the changes keep the existing JCR6 libraries backwards compatible I will keep calling it JCR6.
If this is no longer possible I will likely start up JCR7.


Terms
=====
int - In JCR6 that is always a signed 32-bit integer in LITTLE Endian
byte - a signed 8-bit integer
string - a series of bytes and in JCR6 always prefixed with an int telling JCR6 how many bytes fit in the string.

JCR6 has NO support for non-ASCII characters in its own strings. Never forget that.

Note for people using C-strings.... In JCR6 strings do NOT have a null-terminator at the end. 
If you use C or an other language/library requiring strings to end with a null-terminator you must take in mind to add this terminator yourself.



Basically a JCR6 file contains the following
- Header + Directory offset
- Global config
- Directory
- Data itself



Header
======
A JCR6 file contains a header of 5 bytes. 
The first four containing the characters "JCR6" and then followed with character 26 (1a). 
Merely a trick to fool the DOS based "type" command, however in PowerShell and Unix systems, that doesn't work anymore. XD

Right after the header an in value containing the offset where JCR6 can find the directory is stored.



Global Config
=============
The global config can contain data of all sorts of things. 
Most of my JCR6 based projects don't even use this at this moment, but it can still be handy.
The global config contains variables and they are all prefixed with a tag, then the name, then the value.

byte tag
string variable name
if the tag is 1 the value is a string, if the tag is 2 the value is a boolean (byte containing 0 or 1) and if the tag is 3 it's an int.

when tag value 255 is found, JCR6 immediately stops reading the global config, as this means the end has been reached.


Directory
=========
When it comes to the directory the same tagging system is used. Only a more complex version if it.

The directory starts at the offset defined right after the JCR6 header at the start of the file.

As JCR6 supports compressing its directory data the directory first contains this:
int uncompressedsize
int compressedsize
string compressionalgorithmname

A JCR6 file uses the name "Store" to denote no compression took place, all other compression algorithms are not supported by default and should require drivers. By rule all compression algorithm names should be in LOWER CASE only, only special names that are default to JCR6's code code may contain uppercase. (Now I won't stop you if you want to violate that rule, but then compatibility issues in future versions of JCR6 may be possible).


After that a byte used as a command tag will follow. The tags mean the following:
0x01 - A new directory data block. A string coming next will contain the details. I'll come back to that later.
0xff - end of directory (normally not needed, but some libraries can be a bit stingy, so best is if directories are always closed with this tag).


Now if the tag was 0x01 a string containing another command can come. These can be the following:

__FILE
This denotes, that the data about a file can be there. Basically a file block has the same format as the main config. 
A tag (0xff=end, 1=string, 2=boolean, 3=int), a string for the variable name, and then the value in the specific format.
Now anything can be stored in these varables, so you can put in all kinds of data you want here. As a rule all variables JCR6 requires are prefixed with a "__" in order to set themselves apart from whatever you can come up with.
these variables are
- string __Entry -- Name of the file (please note in JCR6 filenames are case INSENSITIVE... always).
- string __Storage -- Name of the used compression algorithm (ignored when part of a block. Mostly set to the same value as a block in order to make view utilities show the correct data)
- int __Size -- File size prior to compression (in other words the "real size")
- int __CSize -- File size after compression (in other words the "compressed size") (This is always 0 when the file is part of a block)
- int __Offset -- The offset within the JCR6 file of where to find the data. (When part of a block the offset within the block, when not in a block the offset in the JCR6 file as awhole)
- int __Block -- If in a block this contains the ID number of that block (if the file is not part of a block this is 0)
What is important to add if you want to write your own JCR6 library as that is NOT stored in the JCR file is that 
JCR6 should also remember from each entry in which JCR file it lives. After all JCR6 is a patchable format.

__COMMENT
JCR6 files can also contain comments. These are merely stored in the memory can be asked for if desired. They can help you to document a JCR6 file for JCR6 file viewers. A comment merely contains two strings. One containing the name of the comment and the other the comment itself.

__IMPORT
Import will look for an external JCR6 file (or compatible format if JCR6 has the drivers to read such a file) and merge it into the currently being read JCR file and will pretend further on it's all one big resource file. 
Import can handle multiple data, so what comes next is a tag... 1 is a new variable, and 0xff is the end of the variable line. Then a string for the variable name, and a string for its value, and then the next tag until 0xff has been found.

Most versions of JCR6 only want the variable "File" containing the name of the file where the patch should be located. Some versions also support "Sig" and then all files of which the global config variable "Sig" does not match what is asked here will be rejected.

If a file is not found, or could not be read, the request will be ignored.

__REQUIRE
Same function as __IMPORT with the only difference that __IMPORT ignores non-existent files, 
and __REQUIRE will throw an exception when the requested file does not exist.

(Now a file format itself cannot throw exceptions, and how the error is handled should lie in the hands of the programmer 
creating the library. This (of course) also in accordance to the standards set by the used programming language. In any case
if the file asked for with __REQUIRE is not existent or could not be read otherwise, reading the JCR6 resource as a whole should 
be deemed failed).


__BLOCK
Only supported in the C# classes and the C++ library since July 6th, 2021 (C++ libraries readonly, in C# read and write)
Blocks are used to make JCR6 support a technique commonly known as "solid archiving", however JCR6 combines this with normal file storage.
One block contains the data inside multiple files in one big data block. JCR6 will when reading a file have to load the entire block and unpack it and get the data. 
JCR6 should detect this when the __Block value in an entry has any number greater than 0.
Right after the Block comes an int value containing the Block's identity number.
After that dat is read in the same manner as inside an entry. The data currently official is:
- string __Storage -- Name of the used compression algorithm
- int __Size -- File size prior to compression (in other words the "real size")
- int __CSize -- File size after compression (in other words the "compressed size") 
- int __Offset -- The offset within the JCR6 file of where to find the data. 



__DIRECTORY
Not yet supported. Also planned for later



Now the directory block could be anywhere in a JCR6 file. 
Most JCR6 files have it at the end, as that's much simpler given the variable size of directory blocks 
and the sensitivity about finding the files inside the JCR6 file. 
On the offsets the file will immediately start, so no sub-headers there.


When it comes to filenames inside a JCR6 file. As directory separator only "/" should be used and never "\".
Libararies specifically developed for Windows or supporting Windows, should automatically replace "\" with "/" in filenames whenever seen.
I also said it before JCR6 is a case insenstive system when it comes to filenames. 
So if a file is named "MyDir/MyFile" then asking for "MYDIR/MYFILE" should also work (yes, even on Unix/Linux systems!!!)



This information should allow you to write your own JCR6 reader 
(in case you didn't find a library to your liking in my repositories, or when you use a language for which no library yet exists). 
Any questions? Write me an issue.


One last note:
All sizes and offsets are based on (8bit) bytes... 
And all ints are signed. 
Due to this the JCR6 files can be no bigger than approx 2 Gigabytes, 
and that of course also means the files inside JCR files are limited to this size. 
(TIP: A friend of mine who judged this document prior to its publiction reminded me that the usage of IMPORT and REQUIRE
can be a good way to avoid the 2 Gigabyte limit for JCR6 files as a whole. This will still limit the files inside 
the JCR6 file of course, but hey, it's something).

